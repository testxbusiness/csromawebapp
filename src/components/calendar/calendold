'use client'

import { useMemo } from 'react'

export type CalEvent = { id: string; title: string; start: Date; end: Date; color?: string }

export default function SimpleCalendar({
  currentDate,
  view,
  events,
  onNavigate,
  onViewChange,
  onEventClick,
}: {
  currentDate: Date
  view: 'month' | 'week'
  events: CalEvent[]
  onNavigate: (action: 'prev' | 'next' | 'today') => void
  onViewChange: (view: 'month' | 'week') => void
  onEventClick?: (id: string) => void
}) {
  const startOfWeek = (d: Date) => {
    const date = new Date(d)
    const day = (date.getDay() + 6) % 7 // Monday=0
    date.setDate(date.getDate() - day)
    date.setHours(0, 0, 0, 0)
    return date
  }

  const start = useMemo(() => {
    if (view === 'week') return startOfWeek(currentDate)
    const d = new Date(currentDate)
    d.setDate(1)
    d.setHours(0, 0, 0, 0)
    return d
  }, [currentDate, view])

  const days = useMemo(() => {
    const out: Date[] = []
    if (view === 'week') {
      for (let i = 0; i < 7; i++) {
        const d = new Date(start)
        d.setDate(start.getDate() + i)
        out.push(d)
      }
    } else {
      const d = new Date(start)
      const firstDayIdx = (d.getDay() + 6) % 7
      d.setDate(d.getDate() - firstDayIdx)
      for (let i = 0; i < 42; i++) {
        const nd = new Date(d)
        nd.setDate(d.getDate() + i)
        out.push(nd)
      }
    }
    return out
  }, [start, view])

  const dateKey = (d: Date) => {
    const y = d.getFullYear()
    const m = String(d.getMonth() + 1).padStart(2, '0')
    const day = String(d.getDate()).padStart(2, '0')
    return `${y}-${m}-${day}`
  }

  const eventsByDay = useMemo(() => {
    const map: Record<string, CalEvent[]> = {}
    events.forEach(ev => {
      const dayKey = dateKey(ev.start)
      map[dayKey] = map[dayKey] || []
      map[dayKey].push(ev)
    })
    return map
  }, [events])

  const monthLabel = currentDate.toLocaleDateString('it-IT', { month: 'long', year: 'numeric' })

  const monthBtnClass = 'cs-btn cs-btn--sm ' + (view === 'month' ? 'cs-btn--primary' : 'cs-btn--ghost')
  const weekBtnClass = 'cs-btn cs-btn--sm ' + (view === 'week' ? 'cs-btn--primary' : 'cs-btn--ghost')

  return (
    <div className="space-y-3">
      <div className="flex items-center justify-between">
        <div className="flex gap-2">
          <button onClick={() => onNavigate('today')} className="cs-btn cs-btn--sm cs-btn--ghost">Oggi</button>
          <button onClick={() => onNavigate('prev')} className="cs-btn cs-btn--sm cs-btn--ghost">←</button>
          <button onClick={() => onNavigate('next')} className="cs-btn cs-btn--sm cs-btn--ghost">→</button>
        </div>
        <div className="font-semibold capitalize">{monthLabel}</div>
        <div className="flex gap-2">
          <button onClick={() => onViewChange('month')} className={monthBtnClass}>Mese</button>
          <button onClick={() => onViewChange('week')} className={weekBtnClass}>Settimana</button>
        </div>
      </div>

      <div className="grid grid-cols-7 gap-1">
        {['Lun','Mar','Mer','Gio','Ven','Sab','Dom'].map((d) => (
          <div key={d} className="text-xs text-secondary px-2">{d}</div>
        ))}
        {days.map((d, idx) => {
          const isOtherMonth = view === 'month' && d.getMonth() !== currentDate.getMonth()
          const k = dateKey(d)
          const dayEvents = eventsByDay[k] || []
          return (
            <div key={idx} className={'min-h-[90px] border rounded p-1 ' + (isOtherMonth ? 'bg-[color:var(--cs-surface-2)]' : '')}>
              <div className="text-xs text-secondary mb-1">{d.getDate()}</div>
              <div className="space-y-1">
                {dayEvents.map(ev => (
                  <button
                    key={ev.id}
                    type="button"
                    onClick={() => onEventClick && onEventClick(ev.id)}
                    className="w-full text-left truncate text-xs text-white px-1 py-0.5 rounded hover:opacity-90"
                    style={{ backgroundColor: ev.color || '#2563eb' }}
                    title={ev.title}
                  >
                    {ev.title}
                  </button>
                ))}
              </div>
            </div>
          )
        })}
      </div>
    </div>
  )
}
